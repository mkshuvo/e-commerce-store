# Nginx configuration for E-Commerce Store API Gateway Mock
# Used for frontend development and testing

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # CORS headers
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html index.htm;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"api-gateway-mock","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # API endpoints
        location /api/ {
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # Try to serve request as file, then as directory, then fall back to mock responses
            try_files $uri $uri/ @mock_api;
        }

        # Authentication endpoints
        location /auth/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            try_files $uri $uri/ @mock_auth;
        }

        # Mock API responses
        location @mock_api {
            add_header Content-Type application/json;
            
            # Products endpoint
            if ($uri ~ ^/api/products/?$) {
                return 200 '{"data":[{"id":1,"name":"Sample Product","price":29.99,"description":"A sample product for testing","imageUrl":"/images/sample-product.jpg"}],"total":1,"page":1,"pageSize":10}';
            }
            
            # Categories endpoint
            if ($uri ~ ^/api/categories/?$) {
                return 200 '{"data":[{"id":1,"name":"Electronics","description":"Electronic devices and accessories"}],"total":1}';
            }
            
            # Cart endpoint
            if ($uri ~ ^/api/cart/?$) {
                return 200 '{"items":[],"total":0,"itemCount":0}';
            }
            
            # Default API response
            return 200 '{"message":"Mock API response","endpoint":"$uri","method":"$request_method","timestamp":"$time_iso8601"}';
        }

        # Mock authentication responses
        location @mock_auth {
            add_header Content-Type application/json;
            
            # Login endpoint
            if ($uri ~ ^/auth/login/?$ and $request_method = POST) {
                return 200 '{"token":"mock-jwt-token","user":{"id":1,"email":"user@example.com","firstName":"John","lastName":"Doe"},"expiresIn":3600}';
            }
            
            # Register endpoint
            if ($uri ~ ^/auth/register/?$ and $request_method = POST) {
                return 201 '{"message":"User registered successfully","user":{"id":2,"email":"newuser@example.com","firstName":"Jane","lastName":"Smith"}}';
            }
            
            # Profile endpoint
            if ($uri ~ ^/auth/profile/?$ and $request_method = GET) {
                return 200 '{"user":{"id":1,"email":"user@example.com","firstName":"John","lastName":"Doe","createdAt":"2024-01-01T00:00:00Z"}}';
            }
            
            # Logout endpoint
            if ($uri ~ ^/auth/logout/?$ and $request_method = POST) {
                return 200 '{"message":"Logged out successfully"}';
            }
            
            # Refresh token endpoint
            if ($uri ~ ^/auth/refresh/?$ and $request_method = POST) {
                return 200 '{"token":"new-mock-jwt-token","expiresIn":3600}';
            }
            
            # Default auth response
            return 200 '{"message":"Mock auth response","endpoint":"$uri","method":"$request_method"}';
        }

        # Static files
        location / {
            try_files $uri $uri/ =404;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}